#!/usr/bin/env python

import hashlib
import base64
try:
    import Tkinter as tk
except:
    import tkinter as tk


def get_hex(s):
    return s.hexdigest()


def get_b64(s):
    return base64.b64encode(s.digest()).decode('utf-8')


def get_half(s):
    return(s[:len(s) // 2])


def compose(fn):
    if len(fn) > 1:
        return lambda: fn[-1](compose(fn[:-1])())
    else:
        return lambda: fn[0]()


class CheckButton:

    def __init__(self, master, name, func):
        self.value = tk.IntVar()
        self.widget = tk.Checkbutton(
            master, text=name, variable=self.value, command=func)


class Sha1pass(tk.Frame):

    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.grid()
        self.create_widgets()
        self.master.title('sha1pass')

    def create_widgets(self):
        self.entries = (tk.Entry(self), tk.Entry(self))
        checkbuttons_def = (('Show',    self.showbutton_update),
                            ('Secure',  self.securebutton_update),
                            ('Complex', None))
        self.checkbuttons = {n: CheckButton(self, n, f)
                             for n, f in checkbuttons_def}

        button_defs = (("hex", [get_hex]),
                       ("hex half", [get_hex, get_half]),
                       ("Base64", [get_b64]),
                       ("Base64 half", [get_b64, get_half]))
        buttons = [tk.Button(self, text=key, command=self.do_button(val))
                   for key, val in button_defs]

        self.peek = tk.Label(self)

        widget_lines = []
        widget_lines.append(self.entries)
        widget_lines.append([self.checkbuttons[x].widget
                             for x, f in checkbuttons_def] + [self.peek])
        widget_lines.append(buttons)

        maxwidget = max([len(x) for x in widget_lines])
        for i, widget_list in enumerate(widget_lines):
            n = len(widget_list)
            w = maxwidget // n
            for j, widget in enumerate(widget_list):
                widget.grid(row=i, column=j * w, columnspan=w, sticky=tk.W)

        self.set_entry_visibility()

    def set_entry_visibility(self):
        show = u"\u25CF"
        if self.checkbuttons['Show'].value.get():
            show = ""
        for x in self.entries:
            x.config(show=show)

    def showbutton_update(self):
        self.set_entry_visibility()

    def securebutton_update(self):
        show_button = self.checkbuttons['Show'].widget
        if self.checkbuttons['Secure'].value.get():
            show_button.deselect()
            show_button.config(state=tk.DISABLED)
            self.set_entry_visibility()
        else:
            show_button.config(state=tk.NORMAL)
            for x in self.entries:
                x.delete(0, tk.END)

    def get_sha1(self):
        sha1 = hashlib.sha1()
        for x in self.entries:
            sha1.update(x.get().encode('utf-8'))
        return sha1

    def do_button(self, fn):
        return compose([self.get_sha1] + fn + [self.process_output])

    def do_complex(self, s):
        return s + '.H0k' * self.checkbuttons['Complex'].value.get()

    def process_output(self, s):
        s = self.do_complex(s)
        self.peek.config(text=s[0:5])
        self.clipboard_clear()
        self.clipboard_append(s)
        print(s)

app = Sha1pass(tk.Tk())
app.mainloop()
