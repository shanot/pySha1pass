#!/usr/bin/env python3

import hashlib
import base64
import tkinter as tk


class Sha1pass(tk.Frame):

    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.grid()
        self.createWidgets()
        self.master.title('sha1pass')

    def createWidgets(self):
        self.entries = [tk.Entry(self) for f in range(2)]
        self.checkbuttonsData = {'Show': (tk.IntVar(), self.showButtonUpdate),
                                 'Secure': (
                                     tk.IntVar(),
                                     self.secureButtonUpdate),
                                 'Complex': (tk.IntVar(), None)}
        self.checkbuttons = {key: tk.Checkbutton(
            self,
            text=key,
            variable=v[0],
            command=v[1]) for key,
            v in self.checkbuttonsData.items()}

        self.buttonsData = {"hex": self.button_hex,
                            "hex half": self.button_hex_h,
                            "Base64": self.button_b64,
                            "Base64 half": self.button_b64_h}

        self.buttons = {key: tk.Button(self, text=key, command=val)
                        for key, val in self.buttonsData.items()}

        self.set_entry_visibility()

        self.peek = tk.Label(self)

        self.firstLine = self.entries
        self.secondLine = [self.checkbuttons[x]
                           for x in ['Show', 'Secure', 'Complex']] + [self.peek]
        self.thirdLine = [self.buttons[x]
                          for x in ['hex', 'hex half', 'Base64', 'Base64 half']]
        self.widget_lines = [self.firstLine, self.secondLine, self.thirdLine]
        maxwidget = max([len(x) for x in self.widget_lines])
        for i, widget_list in enumerate(self.widget_lines):
            n = len(widget_list)
            w = maxwidget // n
            for j, widget in enumerate(widget_list):
                widget.grid(row=i, column=j * w, columnspan=w, sticky=tk.W)

    def set_entry_visibility(self):
        for x in self.entries:
            x.config(show='*' * (1 - self.checkbuttonsData['Show'][0].get()))

    def showButtonUpdate(self):
        self.set_entry_visibility()

    def secureButtonUpdate(self):
        if self.checkbuttonsData['Secure'][0].get():
            self.checkbuttons['Show'].deselect()
            self.checkbuttons['Show'].config(state=tk.DISABLED)
            self.set_entry_visibility()
        else:
            self.checkbuttons['Show'].config(state=tk.NORMAL)
            for x in self.entries:
                x.delete(0, tk.END)

    def get_sha1(self):
        sha1 = hashlib.sha1()
        for x in self.entries:
            sha1.update(x.get().encode('utf-8'))
        return sha1

    def get_hex(self):
        s = self.get_sha1()
        return s.hexdigest()

    def get_b64(self):
        s = self.get_sha1()
        return base64.b64encode(s.digest()).decode('utf-8')

    def get_half(self, s):
        return(s[0:len(s) // 2])

    def button_hex(self):
        out = self.get_hex()
        self.process_output(out)

    def button_hex_h(self):
        out = self.get_half(self.get_hex())
        self.process_output(out)

    def button_b64(self):
        out = self.get_b64()
        self.process_output(out)

    def button_b64_h(self):
        out = self.get_half(self.get_b64())
        self.process_output(out)

    def do_complex(self, s):
        return s + '.H0k' * self.checkbuttonsData['Complex'][0].get()

    def process_output(self, s):
        s = self.do_complex(s)
        self.peek.config(text=s[0:5])
        self.clipboard_clear()
        self.clipboard_append(s)

app = Sha1pass(tk.Tk())
app.mainloop()
